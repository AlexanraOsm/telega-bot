import logging
from datetime import datetime, timedelta
import calendar
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    ConversationHandler
)
import os
from dotenv import load_dotenv
import gspread
from google.oauth2.service_account import Credentials
from googleapiclient.errors import HttpError
from time import sleep

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞
load_dotenv()
TOKEN = os.getenv('BOT_TOKEN')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Google Sheets
SPREADSHEET_ID = 'YOUR_SPREADSHEET_ID'
CREDS_FILE = 'credentials.json'
SCOPES = ['https://www.googleapis.com/auth/spreadsheets']

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', 
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
CALENDAR_VIEW, CONFIRMATION = range(2)

class CalendarBot:
    def __init__(self):
        self.month_names = [
            "–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å",
            "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"
        ]
        self.day_names = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
    
    def generate_august_calendar(self, selected_dates=None):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è –∞–≤–≥—É—Å—Ç–∞ 2025 —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã—Ö –¥–∞—Ç"""
        if selected_dates is None:
            selected_dates = []
        
        year = 2025
        month = 8
        cal = calendar.monthcalendar(year, month)
        keyboard = []
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –º–µ—Å—è—Ü–µ–º –∏ –≥–æ–¥–æ–º
        keyboard.append([
            InlineKeyboardButton(f"–ê–≤–≥—É—Å—Ç 2025", callback_data="ignore")
        ])
        
        # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
        keyboard.append([
            InlineKeyboardButton(day, callback_data="ignore") for day in self.day_names
        ])
        
        # –î–∞—Ç—ã
        for week in cal:
            row = []
            for day in week:
                if day == 0:
                    row.append(InlineKeyboardButton(" ", callback_data="ignore"))
                else:
                    date_str = f"{day:02d}.{month:02d}.{year}"
                    # –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã—Ö –¥–∞—Ç (1-18 –∞–≤–≥—É—Å—Ç–∞)
                    if 1 <= day <= 18:
                        emoji = "üî¥"  # –ö—Ä–∞—Å–Ω—ã–π –∫—Ä—É–∂–æ–∫
                        prefix = "‚ùå"  # –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–µ—Å—Ç–∏–∫
                    else:
                        emoji = "‚ö™"   # –ë–µ–ª—ã–π –∫—Ä—É–∂–æ–∫
                        prefix = ""
                    
                    # –ï—Å–ª–∏ –¥–∞—Ç–∞ –≤—ã–±—Ä–∞–Ω–∞ - –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ –≥–∞–ª–æ—á–∫—É
                    if date_str in selected_dates:
                        emoji = "‚úÖ"
                        prefix = ""
                        
                    row.append(
                        InlineKeyboardButton(
                            f"{prefix}{emoji}{day}",
                            callback_data=f"date_{year}_{month}_{day}"
                        )
                    )
            keyboard.append(row)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        keyboard.append([
            InlineKeyboardButton("üö´ –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel"),
            InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="done")
        ])
        
        return InlineKeyboardMarkup(keyboard)

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        user = update.message.from_user

        context.user_data.update({
            'user_id': user.id,
            'username': user.username or user.full_name,
            'selected_dates': [],
        })

        await update.message.reply_text(
            "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—ã –≤ –ê–í–ì–£–°–¢–ï 2025, –∫–æ–≥–¥–∞ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å:\n"
            "üî¥ –î–∞—Ç—ã —Å 1 –ø–æ 18 –∞–≤–≥—É—Å—Ç–∞ –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é—Ç—Å—è –∫ –≤—ã–±–æ—Ä—É",
            reply_markup=self.generate_august_calendar()
        )
        return CALENDAR_VIEW

    async def handle_calendar(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        query = update.callback_query
        await query.answer()
        data = query.data
        user_data = context.user_data
        
        if data.startswith('date_'):
            _, year_str, month_str, day_str = data.split('_')
            day = int(day_str)
            date_str = f"{day:02d}.{month_str}.{year_str}"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—ã—Ç–∞—é—Ç—Å—è –ª–∏ –≤—ã–±—Ä–∞—Ç—å –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—É—é –¥–∞—Ç—É
            if 1 <= day <= 18:
                await query.answer("–≠—Ç–∞ –¥–∞—Ç–∞ –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –≤—ã–±–æ—Ä–∞!", show_alert=True)
                return CALENDAR_VIEW
            
            if date_str in user_data['selected_dates']:
                user_data['selected_dates'].remove(date_str)
            else:
                user_data['selected_dates'].append(date_str)
            
            await query.edit_message_reply_markup(
                reply_markup=self.generate_august_calendar(user_data['selected_dates'])
            )
            return CALENDAR_VIEW
        
        elif data == 'done':
            if not user_data['selected_dates']:
                await query.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –¥–∞—Ç—É!", show_alert=True)
                return CALENDAR_VIEW
                
            dates_list = "\n".join([f"‚Ä¢ {d}" for d in sorted(user_data['selected_dates'])])
            await query.edit_message_text(
                f"üìã –í–∞—à –≤—ã–±–æ—Ä:\n{dates_list}\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å?",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚úÖ –î–∞", callback_data="confirm")],
                    [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="edit")]
                ])
            )
            return CONFIRMATION
        
        elif data == 'cancel':
            await query.edit_message_text("‚ùå –û–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω")
            return ConversationHandler.END

        return CALENDAR_VIEW

    async def handle_confirmation(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        query = update.callback_query
        await query.answer()
        
        if query.data == 'confirm':
            await self.save_results(context.user_data)
            await query.edit_message_text("‚úÖ –í–∞—à–∏ –¥–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –°–ø–∞—Å–∏–±–æ!")
            return ConversationHandler.END
            
        elif query.data == 'edit':
            await query.edit_message_text(
                "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—ã:",
                reply_markup=self.generate_august_calendar(context.user_data['selected_dates'])
            )
            return CALENDAR_VIEW

    async def save_results(self, user_data):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ Google –¢–∞–±–ª–∏—Ü—É"""
        try:
            # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
            creds = Credentials.from_service_account_file(CREDS_FILE, scopes=SCOPES)
            client = gspread.authorize(creds)
            
            # –û—Ç–∫—Ä—ã—Ç–∏–µ —Ç–∞–±–ª–∏—Ü—ã
            try:
                sheet = client.open_by_key(SPREADSHEET_ID).sheet1
            except gspread.SpreadsheetNotFound:
                logger.error("–¢–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ SPREADSHEET_ID")
                return
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            row = [
                str(user_data['user_id']),
                user_data['username'],
                ", ".join(user_data['selected_dates']),
                timestamp
            ]
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
            if sheet.row_count == 0:
                sheet.append_row(["User ID", "Username", "Selected Dates", "Timestamp"])
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            sheet.append_row(row)
            logger.info(f"–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Google –¢–∞–±–ª–∏—Ü—É: {row}")
            
        except HttpError as e:
            logger.error(f"–û—à–∏–±–∫–∞ Google API: {e}")
            # Fallback: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
            with open("backup_results.csv", "a", encoding="utf-8") as f:
                f.write(f"{','.join(map(str, row))}\n")
                
        except gspread.exceptions.APIError as e:
            logger.error(f"–û—à–∏–±–∫–∞ gspread: {e}")
            sleep(10)
            await self.save_results(user_data)  # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞
            
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")


def main() -> None:
    bot = CalendarBot()
    
    # –°–æ–∑–¥–∞–µ–º Application
    application = Application.builder().token(TOKEN).build()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', bot.start)],
        states={
            CALENDAR_VIEW: [CallbackQueryHandler(bot.handle_calendar)],
            CONFIRMATION: [CallbackQueryHandler(bot.handle_confirmation)]
        },
        fallbacks=[]
    )
    
    application.add_handler(conv_handler)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç –∫–æ–º–∞–Ω–¥...")


if __name__ == '__main__':
    main()
