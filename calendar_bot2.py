import os
import logging
from datetime import datetime, timedelta
import calendar
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    ConversationHandler
)
import gspread
from google.oauth2.service_account import Credentials
from googleapiclient.errors import HttpError
from time import sleep

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.environ['TOKEN']

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Google Sheets
SPREADSHEET_ID = os.environ['SPREADSHEET_ID']
SCOPES = ['https://www.googleapis.com/auth/spreadsheets']

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ credentials.json
if 'GOOGLE_CREDS_JSON' in os.environ:
    with open('credentials.json', 'w') as f:
        f.write(os.environ['GOOGLE_CREDS_JSON'])
    CREDS_FILE = 'credentials.json'
else:
    CREDS_FILE = None
    logging.warning("GOOGLE_CREDS_JSON –Ω–µ –∑–∞–¥–∞–Ω!")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
CALENDAR_VIEW, CONFIRMATION = range(2)


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
CALENDAR_VIEW, CONFIRMATION = range(2)


class CalendarBot:
    def __init__(self):
        self.month_names = [
            "–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å",
            "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"
        ]
        self.day_names = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]

    def generate_july_calendar(self, selected_dates=None):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è —Ç–æ–ª—å–∫–æ –¥–ª—è –∏—é–ª—è 2025 –≥–æ–¥–∞"""
        if selected_dates is None:
            selected_dates = []

        year = 2025
        month = 7
        cal = calendar.monthcalendar(year, month)
        keyboard = []

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –º–µ—Å—è—Ü–µ–º –∏ –≥–æ–¥–æ–º
        keyboard.append([
            InlineKeyboardButton(f"–ò—é–ª—å 2025", callback_data="ignore")
        ])

        # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
        keyboard.append([
            InlineKeyboardButton(day, callback_data="ignore") for day in self.day_names
        ])

        # –î–∞—Ç—ã
        for week in cal:
            row = []
            for day in week:
                if day == 0:
                    row.append(InlineKeyboardButton(" ", callback_data="ignore"))
                else:
                    date_str = f"{day:02d}.{month:02d}.{year}"
                    emoji = "‚úÖ" if date_str in selected_dates else "‚ö™"
                    row.append(
                        InlineKeyboardButton(
                            f"{emoji}{day}",
                            callback_data=f"date_{year}_{month}_{day}"
                        )
                    )
            keyboard.append(row)

        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        keyboard.append([
            InlineKeyboardButton("üö´ –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel"),
            InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="done")
        ])

        return InlineKeyboardMarkup(keyboard)

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        user = update.message.from_user

        context.user_data.update({
            'user_id': user.id,
            'username': user.username or user.full_name,
            'selected_dates': [],
        })

        await update.message.reply_text(
            "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—ã –≤ –ò–Æ–õ–ï 2025, –∫–æ–≥–¥–∞ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å:",
            reply_markup=self.generate_july_calendar()
        )
        return CALENDAR_VIEW

    async def handle_calendar(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        query = update.callback_query
        await query.answer()
        data = query.data
        user_data = context.user_data

        if data.startswith('date_'):
            _, year_str, month_str, day_str = data.split('_')
            date_str = f"{int(day_str):02d}.{int(month_str):02d}.{int(year_str)}"

            if date_str in user_data['selected_dates']:
                user_data['selected_dates'].remove(date_str)
            else:
                user_data['selected_dates'].append(date_str)

            await query.edit_message_reply_markup(
                reply_markup=self.generate_july_calendar(user_data['selected_dates'])
            )
            return CALENDAR_VIEW

        elif data == 'done':
            if not user_data['selected_dates']:
                await query.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –¥–∞—Ç—É!", show_alert=True)
                return CALENDAR_VIEW

            dates_list = "\n".join([f"‚Ä¢ {d}" for d in sorted(user_data['selected_dates'])])
            await query.edit_message_text(
                f"üìã –í–∞—à –≤—ã–±–æ—Ä:\n{dates_list}\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å?",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚úÖ –î–∞", callback_data="confirm")],
                    [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="edit")]
                ])
            )
            return CONFIRMATION

        elif data == 'cancel':
            await query.edit_message_text("‚ùå –û–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω")
            return ConversationHandler.END

        return CALENDAR_VIEW

    async def handle_confirmation(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        query = update.callback_query
        await query.answer()

        if query.data == 'confirm':
            await self.save_results(context.user_data)
            await query.edit_message_text("‚úÖ –í–∞—à–∏ –¥–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –°–ø–∞—Å–∏–±–æ!")
            return ConversationHandler.END

        elif query.data == 'edit':
            await query.edit_message_text(
                "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—ã:",
                reply_markup=self.generate_july_calendar(context.user_data['selected_dates'])
            )
            return CALENDAR_VIEW

    async def save_results(self, user_data):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ Google –¢–∞–±–ª–∏—Ü—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º —Å—Ç–æ–ª–±—Ü–æ–≤"""
        try:
            # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
            creds = Credentials.from_service_account_file(CREDS_FILE, scopes=SCOPES)
            client = gspread.authorize(creds)

            # –û—Ç–∫—Ä—ã—Ç–∏–µ —Ç–∞–±–ª–∏—Ü—ã
            try:
                spreadsheet = client.open_by_key(SPREADSHEET_ID)
                sheet = spreadsheet.sheet1
            except gspread.SpreadsheetNotFound:
                logger.error("–¢–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ SPREADSHEET_ID")
                return

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞—Ç—ã –∏—é–ª—è 2025
            july_dates = [f"{day:02d}.07.2025" for day in range(1, 32)]

            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            user_id = str(user_data['user_id'])
            username = user_data['username']

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
            if sheet.row_count > 0:
                headers = sheet.row_values(1)
            else:
                headers = []

            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
            if not headers:
                headers = ["Timestamp", "User ID", "Username"] + july_dates
                sheet.append_row(headers)
                sleep(2)  # –ü–∞—É–∑–∞ –¥–ª—è API
                logger.info("–°–æ–∑–¥–∞–Ω—ã –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤")

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –∑–∞–ø–∏—Å–∏
            row_data = [timestamp, user_id, username]

            # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–π –¥–∞—Ç—ã (1 –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞, –∏–Ω–∞—á–µ 0)
            for date in july_dates:
                row_data.append("1" if date in user_data['selected_dates'] else "0")

            # –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ —É–∂–µ –æ—Ç–≤–µ—á–∞–ª)
            user_row_index = None
            existing_data = sheet.get_all_records()

            for i, record in enumerate(existing_data, start=2):  # –°—Ç—Ä–æ–∫–∏ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 2
                if str(record.get("User ID", "")) == user_id:
                    user_row_index = i
                    break

            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É
            if user_row_index:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
                for col_index, value in enumerate(row_data, start=1):
                    sheet.update_cell(user_row_index, col_index, value)
            else:
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
                sheet.append_row(row_data)

            logger.info(f"–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Google –¢–∞–±–ª–∏—Ü—É –¥–ª—è {username}")

            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            self.format_spreadsheet(sheet, headers, july_dates)

        except HttpError as e:
            logger.error(f"–û—à–∏–±–∫–∞ Google API: {e}")
            # –†–µ–∑–µ—Ä–≤–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ CSV
            with open("backup_results.csv", "a", encoding="utf-8") as f:
                f.write(f"{timestamp},{user_id},{username},")
                f.write(",".join(["1" if d in user_data['selected_dates'] else "0" for d in july_dates]))
                f.write("\n")
            logger.info("–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Ñ–∞–π–ª backup_results.csv")

        except gspread.exceptions.APIError as e:
            logger.error(f"–û—à–∏–±–∫–∞ gspread: {e}")
            if "RESOURCE_EXHAUSTED" in str(e):
                logger.warning("–ü—Ä–µ–≤—ã—à–µ–Ω—ã –∫–≤–æ—Ç—ã API. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 10 —Å–µ–∫...")
                sleep(10)
                await self.save_results(user_data)  # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞

        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            logger.exception(e)

    def format_spreadsheet(self, sheet, headers, july_dates):
        """–ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫ —Ç–∞–±–ª–∏—Ü–µ"""
        try:
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            sheet.format("A1:Z1", {
                "textFormat": {"bold": True},
                "backgroundColor": {"red": 0.9, "green": 0.9, "blue": 0.9},
                "horizontalAlignment": "CENTER"
            })

            # –ê–≤—Ç–æ-—à–∏—Ä–∏–Ω–∞ —Å—Ç–æ–ª–±—Ü–æ–≤
            body = {
                "requests": [{
                    "autoResizeDimensions": {
                        "dimensions": {
                            "sheetId": sheet.id,
                            "dimension": "COLUMNS",
                            "startIndex": 0,
                            "endIndex": len(headers)
                        }
                    }
                }]
            }
            sheet.spreadsheet.batch_update(body)

            # –£—Å–ª–æ–≤–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞—Ç
            for i, date in enumerate(july_dates, start=4):  # –ù–∞—á–∏–Ω–∞—è —Å –∫–æ–ª–æ–Ω–∫–∏ D
                col_letter = chr(64 + i)  # A=65, B=66, D=68 –∏ —Ç.–¥.
                sheet.conditional_format(
                    f"{col_letter}2:{col_letter}{sheet.row_count}",
                    {
                        "type": "TEXT_EQ",
                        "values": ["1"],
                        "format": {
                            "backgroundColor": {"red": 0.85, "green": 0.92, "blue": 0.83}
                        }
                    }
                )

            logger.info("–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏–º–µ–Ω–µ–Ω–æ")

        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã: {e}")


def main() -> None:
    bot = CalendarBot()

    # –°–æ–∑–¥–∞–µ–º Application
    application = Application.builder().token(TOKEN).build()

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', bot.start)],
        states={
            CALENDAR_VIEW: [CallbackQueryHandler(bot.handle_calendar)],
            CONFIRMATION: [CallbackQueryHandler(bot.handle_confirmation)]
        },
        fallbacks=[]
    )

    application.add_handler(conv_handler)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç –∫–æ–º–∞–Ω–¥...")


if __name__ == '__main__':
    main()


